// --- GOOGLE ADS ERROR MONITOR CONFIGURATION ---

// 1. MASTER SPREADSHEET URL (same as your budget tracker)
const MASTER_SPREADSHEET_URL = "https://docs.google.com/spreadsheets/d/1bS1xmTFB0LWGvYeZBPcykGMY0SwZ4W-Ny6aKVloy0SM/edit?usp=sharing";
const MASTER_SHEET_NAME = "AccountMappings";

// 2. EMAIL CONFIGURATION
const EMAIL_RECIPIENTS = ["your-email@domain.com"]; // Add your email addresses
const EMAIL_SUBJECT_PREFIX = "[Google Ads Alert]";

// 3. ERROR THRESHOLDS (customize these based on your needs)
const ERROR_THRESHOLDS = {
  MIN_QUALITY_SCORE: 3,
  LOW_SPEND_VS_BUDGET_THRESHOLD: 0.25, // 25%
  BUDGET_UTILIZATION_WARNING: 0.8, // 80%
  BUDGET_UTILIZATION_CRITICAL: 0.95 // 95%
};

// 4. TEST MODE
const SINGLE_CID_FOR_TESTING = ""; // Set to account ID for testing

// --- END OF CONFIGURATION ---

function main() {
  Logger.log("=== Starting Google Ads Error Monitor ===");
  
  const allErrors = [];
  const accountMappings = getAccountMappings();
  
  if (!accountMappings || accountMappings.length === 0) {
    Logger.log("❌ No account mappings found.");
    return;
  }

  for (const mapping of accountMappings) {
    if (SINGLE_CID_FOR_TESTING && mapping.accountId !== SINGLE_CID_FOR_TESTING) {
      continue;
    }

    try {
      const account = getAccountById(mapping.accountId);
      if (!account) {
        allErrors.push({
          accountName: mapping.accountName,
          accountId: mapping.accountId,
          errorType: "ACCOUNT_ACCESS",
          severity: "CRITICAL",
          message: "Account not accessible or not found",
          recommendation: "Check account permissions and ensure the account ID is correct"
        });
        continue;
      }

      AdsManagerApp.select(account);
      Logger.log(`Checking account: ${account.getName()} (${mapping.accountId})`);

      // Check all types of errors
      const accountErrors = [
        ...checkAccountLevelIssues(account, mapping),
        ...checkAdLevelIssues(account, mapping),
        ...checkKeywordLevelIssues(account, mapping),
        ...checkPerformanceIssues(account, mapping),
        ...checkShoppingCampaignErrors(account, mapping),
        ...checkSpendingIssues(account, mapping),
        ...checkLandingPageIssues(account, mapping),
        ...checkTargetingIssues(account, mapping),
        ...checkConversionTrackingIssues(account, mapping),
        ...checkFeedIssues(account, mapping)
      ];

      allErrors.push(...accountErrors);

    } catch (error) {
      allErrors.push({
        accountName: mapping.accountName,
        accountId: mapping.accountId,
        errorType: "SCRIPT_ERROR",
        severity: "CRITICAL",
        message: `Script error: ${error.message}`,
        recommendation: "Check script permissions and account access"
      });
    }
  }

  // Send email report if there are errors
  if (allErrors.length > 0) {
    sendErrorReport(allErrors);
  } else {
    Logger.log("✅ No errors found across all accounts");
  }
}

function checkAccountLevelIssues(account, mapping) {
  const errors = [];
  
  try {
    // Check account status
    const customer = AdsApp.currentAccount();
    const accountInfo = customer.getCustomer();
    
    // Check if account is suspended
    if (accountInfo.getStatus() === "SUSPENDED") {
      errors.push({
        accountName: mapping.accountName,
        accountId: mapping.accountId,
        errorType: "ACCOUNT_SUSPENDED",
        severity: "CRITICAL",
        message: "Account is suspended",
        recommendation: "Contact Google Ads support immediately to resolve suspension issues"
      });
    }

    // Check billing status
    const billingInfo = accountInfo.getBillingInfo();
    if (billingInfo && billingInfo.getStatus() === "SUSPENDED") {
      errors.push({
        accountName: mapping.accountName,
        accountId: mapping.accountId,
        errorType: "BILLING_SUSPENDED",
        severity: "CRITICAL",
        message: "Billing is suspended",
        recommendation: "Update payment method and resolve billing issues in Google Ads"
      });
    }

    // Check for script errors across all scripts in the MCC
    try {
      const scripts = AdsManagerApp.scripts();
      while (scripts.hasNext()) {
        const script = scripts.next();
        const scriptName = script.getName();
        
        // Check if script has any recent errors
        const executions = script.getExecutions();
        let hasRecentErrors = false;
        
        while (executions.hasNext()) {
          const execution = executions.next();
          const status = execution.getStatus();
          const startTime = execution.getStartTime();
          const now = new Date();
          const hoursSinceExecution = (now - startTime) / (1000 * 60 * 60);
          
          // Check for errors in the last 24 hours
          if (hoursSinceExecution <= 24 && status === "FAILED") {
            hasRecentErrors = true;
            break;
          }
        }
        
        if (hasRecentErrors) {
          errors.push({
            accountName: mapping.accountName,
            accountId: mapping.accountId,
            errorType: "SCRIPT_ERROR",
            severity: "CRITICAL",
            message: `Script "${scriptName}" has failed in the last 24 hours`,
            recommendation: "Check script logs and fix any issues in the script"
          });
        }
      }
    } catch (scriptError) {
      Logger.log(`Error checking scripts: ${scriptError.message}`);
      // If we can't check scripts, add a general script error
      errors.push({
        accountName: mapping.accountName,
        accountId: mapping.accountId,
        errorType: "SCRIPT_ERROR",
        severity: "CRITICAL",
        message: `Error checking scripts: ${scriptError.message}`,
        recommendation: "Check script permissions and account access"
      });
    }

  } catch (error) {
    Logger.log(`Error checking account level issues: ${error.message}`);
  }
  
  return errors;
}

function checkCampaignLevelIssues(account, mapping) {
  const errors = [];
  
  try {
    const campaignIterator = AdsApp.campaigns()
      .withCondition("Status = ENABLED")
      .get();

    while (campaignIterator.hasNext()) {
      const campaign = campaignIterator.next();
      const campaignName = campaign.getName();
      
      // Check campaign status
      if (campaign.getStatus() === "PAUSED") {
        errors.push({
          accountName: mapping.accountName,
          accountId: mapping.accountId,
          errorType: "CAMPAIGN_PAUSED",
          severity: "MEDIUM",
          message: `Campaign "${campaignName}" is paused`,
          recommendation: "Review campaign performance and consider enabling if appropriate"
        });
      }

      // Check campaign budget
      const budget = campaign.getBudget();
      if (budget) {
        const budgetAmount = budget.getAmount();
        const budgetDeliveryMethod = budget.getDeliveryMethod();
        
        if (budgetDeliveryMethod === "STANDARD" && budgetAmount > 0) {
          // Check if campaign is approaching budget limit
          const stats = campaign.getStatsFor("TODAY");
          const cost = stats.getCost();
          const budgetUtilization = cost / budgetAmount;
          
          if (budgetUtilization >= ERROR_THRESHOLDS.BUDGET_UTILIZATION_CRITICAL) {
            errors.push({
              accountName: mapping.accountName,
              accountId: mapping.accountId,
              errorType: "CAMPAIGN_BUDGET_CRITICAL",
              severity: "HIGH",
              message: `Campaign "${campaignName}" has used ${(budgetUtilization * 100).toFixed(1)}% of daily budget`,
              recommendation: "Consider increasing budget or pausing campaign to prevent overspend"
            });
          } else if (budgetUtilization >= ERROR_THRESHOLDS.BUDGET_UTILIZATION_WARNING) {
            errors.push({
              accountName: mapping.accountName,
              accountId: mapping.accountId,
              errorType: "CAMPAIGN_BUDGET_WARNING",
              severity: "MEDIUM",
              message: `Campaign "${campaignName}" has used ${(budgetUtilization * 100).toFixed(1)}% of daily budget`,
              recommendation: "Monitor budget usage closely"
            });
          }
        }
      }

      // Check for missing ad extensions
      const adExtensions = campaign.extensions();
      const sitelinkExtensions = adExtensions.sitelinks().get();
      const calloutExtensions = adExtensions.callouts().get();
      
      if (!sitelinkExtensions.hasNext() && !calloutExtensions.hasNext()) {
        errors.push({
          accountName: mapping.accountName,
          accountId: mapping.accountId,
          errorType: "MISSING_AD_EXTENSIONS",
          severity: "MEDIUM",
          message: `Campaign "${campaignName}" has no ad extensions`,
          recommendation: "Add sitelink or callout extensions to improve ad performance"
        });
      }
    }

  } catch (error) {
    Logger.log(`Error checking campaign level issues: ${error.message}`);
  }
  
  return errors;
}

function checkAdLevelIssues(account, mapping) {
  const errors = [];
  
  try {
    const adIterator = AdsApp.ads()
      .withCondition("Status = ENABLED")
      .get();

    while (adIterator.hasNext()) {
      const ad = adIterator.next();
      const adGroup = ad.getAdGroup();
      const campaign = adGroup.getCampaign();
      
      // Check ad status
      if (ad.getStatus() === "DISAPPROVED") {
        errors.push({
          accountName: mapping.accountName,
          accountId: mapping.accountId,
          errorType: "AD_DISAPPROVED",
          severity: "HIGH",
          message: `Ad "${ad.getHeadline()}" in campaign "${campaign.getName()}" is disapproved`,
          recommendation: "Review ad content and fix policy violations, then resubmit for approval"
        });
      }
    }

  } catch (error) {
    Logger.log(`Error checking ad level issues: ${error.message}`);
  }
  
  return errors;
}

function checkKeywordLevelIssues(account, mapping) {
  const errors = [];
  
  try {
    const keywordIterator = AdsApp.keywords()
      .withCondition("Status = ENABLED")
      .get();

    while (keywordIterator.hasNext()) {
      const keyword = keywordIterator.next();
      const adGroup = keyword.getAdGroup();
      const campaign = adGroup.getCampaign();
      
      // Check keyword status
      if (keyword.getStatus() === "DISAPPROVED") {
        errors.push({
          accountName: mapping.accountName,
          accountId: mapping.accountId,
          errorType: "KEYWORD_DISAPPROVED",
          severity: "MEDIUM",
          message: `Keyword "${keyword.getText()}" in campaign "${campaign.getName()}" is disapproved`,
          recommendation: "Review keyword content and fix policy violations"
        });
      }

      // Check quality score
      const qualityScore = keyword.getQualityScore();
      if (qualityScore < ERROR_THRESHOLDS.MIN_QUALITY_SCORE) {
        errors.push({
          accountName: mapping.accountName,
          accountId: mapping.accountId,
          errorType: "LOW_QUALITY_SCORE",
          severity: "MEDIUM",
          message: `Keyword "${keyword.getText()}" has low quality score (${qualityScore}/10)`,
          recommendation: "Improve landing page relevance, ad relevance, and expected CTR"
        });
      }

      // Check for low search volume (14 days)
      const stats = keyword.getStatsFor("LAST_14_DAYS");
      if (stats.getImpressions() === 0) {
        errors.push({
          accountName: mapping.accountName,
          accountId: mapping.accountId,
          errorType: "LOW_SEARCH_VOLUME",
          severity: "LOW",
          message: `Keyword "${keyword.getText()}" has no impressions in the last 14 days`,
          recommendation: "Consider broadening match types or adding related keywords"
        });
      }
    }

  } catch (error) {
    Logger.log(`Error checking keyword level issues: ${error.message}`);
  }
  
  return errors;
}

function checkPerformanceIssues(account, mapping) {
  const errors = [];
  
  try {
    // Check campaign-level performance for 0 conversions
    const campaignIterator = AdsApp.campaigns()
      .withCondition("Status = ENABLED")
      .get();

    while (campaignIterator.hasNext()) {
      const campaign = campaignIterator.next();
      const campaignName = campaign.getName();
      
      // Check for campaigns with 0 conversions in last 14 days
      const stats = campaign.getStatsFor("LAST_14_DAYS");
      const conversions = stats.getConversions();
      const impressions = stats.getImpressions();
      
      // Only flag if campaign has impressions but no conversions
      if (impressions > 0 && conversions === 0) {
        errors.push({
          accountName: mapping.accountName,
          accountId: mapping.accountId,
          errorType: "CAMPAIGN_NO_CONVERSIONS",
          severity: "HIGH",
          message: `Campaign "${campaignName}" has 0 conversions in the last 14 days despite having ${impressions} impressions`,
          recommendation: "Review targeting, landing pages, and conversion tracking setup"
        });
      }
    }

  } catch (error) {
    Logger.log(`Error checking performance issues: ${error.message}`);
  }
  
  return errors;
}

function checkBudgetIssues(account, mapping) {
  const errors = [];
  
  try {
    // Check if account is approaching monthly budget
    const accountStats = account.getStatsFor("THIS_MONTH");
    const cost = accountStats.getCost();
    
    // Get account budget (this would need to be stored separately or calculated)
    // For now, we'll check for unusual spending patterns
    const today = new Date();
    const daysInMonth = new Date(today.getFullYear(), today.getMonth() + 1, 0).getDate();
    const averageDailySpend = cost / today.getDate();
    const projectedMonthlySpend = averageDailySpend * daysInMonth;
    
    // If projected spend is significantly higher than typical, flag it
    if (projectedMonthlySpend > cost * 2) {
      errors.push({
        accountName: mapping.accountName,
        accountId: mapping.accountId,
        errorType: "HIGH_SPEND_PROJECTION",
        severity: "MEDIUM",
        message: `Account projected to spend $${projectedMonthlySpend.toFixed(2)} this month`,
        recommendation: "Review campaign budgets and spending patterns"
      });
    }

  } catch (error) {
    Logger.log(`Error checking budget issues: ${error.message}`);
  }
  
  return errors;
}

function sendErrorReport(errors) {
  try {
    const emailBody = generateErrorReportEmail(errors);
    const subject = `${EMAIL_SUBJECT_PREFIX} ${errors.length} Issues Found`;
    
    for (const recipient of EMAIL_RECIPIENTS) {
      MailApp.sendEmail(recipient, subject, emailBody);
    }
    
    Logger.log(`✅ Error report sent to ${EMAIL_RECIPIENTS.length} recipient(s)`);
    
  } catch (error) {
    Logger.log(`❌ Error sending email report: ${error.message}`);
  }
}

function generateErrorReportEmail(errors) {
  let emailBody = "Google Ads Error Monitor Report\n";
  emailBody += "================================\n\n";
  emailBody += `Date: ${new Date().toLocaleString()}\n`;
  emailBody += `Total Issues Found: ${errors.length}\n\n`;
  
  // Group errors by account
  const errorsByAccount = {};
  errors.forEach(error => {
    if (!errorsByAccount[error.accountName]) {
      errorsByAccount[error.accountName] = [];
    }
    errorsByAccount[error.accountName].push(error);
  });
  
  // Generate report for each account
  for (const [accountName, accountErrors] of Object.entries(errorsByAccount)) {
    emailBody += `\n�� ACCOUNT: ${accountName}\n`;
    emailBody += "=".repeat(50) + "\n";
    
    // Group by severity
    const criticalErrors = accountErrors.filter(e => e.severity === "CRITICAL");
    const highErrors = accountErrors.filter(e => e.severity === "HIGH");
    const mediumErrors = accountErrors.filter(e => e.severity === "MEDIUM");
    const lowErrors = accountErrors.filter(e => e.severity === "LOW");
    
    if (criticalErrors.length > 0) {
      emailBody += "\n�� CRITICAL ISSUES:\n";
      criticalErrors.forEach(error => {
        emailBody += `• ${error.message}\n`;
        emailBody += `  Recommendation: ${error.recommendation}\n\n`;
      });
    }
    
    if (highErrors.length > 0) {
      emailBody += "\n⚠️ HIGH PRIORITY ISSUES:\n";
      highErrors.forEach(error => {
        emailBody += `• ${error.message}\n`;
        emailBody += `  Recommendation: ${error.recommendation}\n\n`;
      });
    }
    
    if (mediumErrors.length > 0) {
      emailBody += "\n⚠️ MEDIUM PRIORITY ISSUES:\n";
      mediumErrors.forEach(error => {
        emailBody += `• ${error.message}\n`;
        emailBody += `  Recommendation: ${error.recommendation}\n\n`;
      });
    }
    
    if (lowErrors.length > 0) {
      emailBody += "\nℹ️ LOW PRIORITY ISSUES:\n";
      lowErrors.forEach(error => {
        emailBody += `• ${error.message}\n`;
        emailBody += `  Recommendation: ${error.recommendation}\n\n`;
      });
    }
  }
  
  emailBody += "\n" + "=".repeat(50) + "\n";
  emailBody += "This report was generated automatically by Google Ads Error Monitor.\n";
  emailBody += "Please review and take appropriate action on the issues identified.\n";
  
  return emailBody;
}

// Helper functions (reused from your existing script)
function getAccountMappings() {
  try {
    const masterSpreadsheet = SpreadsheetApp.openByUrl(MASTER_SPREADSHEET_URL);
    const masterSheet = masterSpreadsheet.getSheetByName(MASTER_SHEET_NAME);
    
    if (!masterSheet) {
      throw new Error(`Tab "${MASTER_SHEET_NAME}" not found in master spreadsheet`);
    }

    const data = masterSheet.getDataRange().getValues();
    const mappings = [];

    for (let i = 1; i < data.length; i++) {
      const row = data[i];
      const accountName = row[0]?.toString().trim() || "Unknown";
      const accountId = row[1]?.toString().trim();
      const spreadsheetUrl = row[2]?.toString().trim();

      if (accountId && spreadsheetUrl) {
        mappings.push({
          accountId: accountId,
          spreadsheetUrl: spreadsheetUrl,
          accountName: accountName
        });
      }
    }

    return mappings;

  } catch (error) {
    Logger.log(`❌ Error reading master spreadsheet: ${error.message}`);
    throw error;
  }
}

function getAccountById(accountId) {
  try {
    const accountIterator = AdsManagerApp.accounts().withIds([accountId]).get();
    if (accountIterator.hasNext()) {
      return accountIterator.next();
    }
    return null;
  } catch (error) {
    Logger.log(`Error finding account ${accountId}: ${error.message}`);
    return null;
  }
}

// Function to run the monitor on a schedule
function runErrorMonitor() {
  main();
}

// ========================================
// MISSING ERROR CHECKING FUNCTIONS
// ========================================

// Shopping Campaign Issues
function checkShoppingCampaignErrors(account, mapping) {
  const errors = [];
  
  try {
    Logger.log("Checking shopping campaign errors...");
    
    const query = `
      SELECT 
          campaign.id,
          campaign.name,
          campaign.status,
          campaign.advertising_channel_type,
          campaign.shopping_setting.merchant_id,
          campaign.shopping_setting.sales_country
      FROM campaign
      WHERE campaign.advertising_channel_type = 'SHOPPING'
      AND campaign.status IN ('ENABLED', 'PAUSED')
    `;
    
    const rows = AdsApp.search(query);
    let shoppingCampaigns = 0;
    
    while (rows.hasNext()) {
      const row = rows.next();
      shoppingCampaigns++;
      
      // Check for missing merchant ID
      if (!row['campaign.shopping_setting.merchant_id']) {
        errors.push({
          accountName: mapping.accountName,
          accountId: mapping.accountId,
          errorType: "SHOPPING_MERCHANT_ID_MISSING",
          severity: "HIGH",
          message: `Shopping campaign '${row['campaign.name']}' has no merchant ID`,
          recommendation: "Link Google Merchant Center account to the campaign"
        });
      }
    }
    
    if (shoppingCampaigns === 0) {
      Logger.log("No shopping campaigns found");
    }
    
  } catch (error) {
    Logger.log(`Error checking shopping campaigns: ${error.message}`);
  }
  
  return errors;
}

// Spending Issues with Ad Schedule Awareness
function checkSpendingIssues(account, mapping) {
  const errors = [];
  
  try {
    Logger.log("Checking spending issues...");
    
    const query = `
      SELECT 
          campaign.id,
          campaign.name,
          campaign.status,
          campaign.daily_budget_micros,
          metrics.cost_micros,
          metrics.impressions,
          campaign.ad_schedule_type
      FROM campaign
      WHERE campaign.status = 'ENABLED'
      AND campaign.daily_budget_micros > 0
    `;
    
    const rows = AdsApp.search(query);
    
    while (rows.hasNext()) {
      const row = rows.next();
      const dailyBudget = row['campaign.daily_budget_micros'] / 1000000;
      const cost = row['metrics.cost_micros'] / 1000000;
      const impressions = row['metrics.impressions'];
      const adScheduleType = row['campaign.ad_schedule_type'];
      
      // Check for no spend in last 24 hours (accounting for ad schedules)
      if (cost === 0 && impressions === 0) {
        // Only flag if campaign has standard ad schedule or no ad schedule restrictions
        if (adScheduleType === 'STANDARD') {
          errors.push({
            accountName: mapping.accountName,
            accountId: mapping.accountId,
            errorType: "NO_SPEND_24H",
            severity: "HIGH",
            message: `Campaign '${row['campaign.name']}' has no spend in 24 hours`,
            recommendation: "Check targeting, keywords, and ad approval status"
          });
        }
      }
      
      // Check for very low spend vs budget (25% threshold)
      if (cost > 0 && dailyBudget > 0 && (cost / dailyBudget) < ERROR_THRESHOLDS.LOW_SPEND_VS_BUDGET_THRESHOLD) {
        errors.push({
          accountName: mapping.accountName,
          accountId: mapping.accountId,
          errorType: "LOW_SPEND_VS_BUDGET",
          severity: "LOW",
          message: `Campaign '${row['campaign.name']}' spending only ${((cost / dailyBudget) * 100).toFixed(1)}% of daily budget`,
          recommendation: "Review targeting and bidding strategy"
        });
      }
    }
    
  } catch (error) {
    Logger.log(`Error checking spending issues: ${error.message}`);
  }
  
  return errors;
}

// Landing Page Issues
function checkLandingPageIssues(account, mapping) {
  const errors = [];
  
  try {
    Logger.log("Checking landing page issues...");
    
    const query = `
      SELECT 
          ad_group_ad.ad.id,
          ad_group_ad.ad.name,
          ad_group_ad.ad.final_urls,
          ad_group_ad.ad.status
      FROM ad_group_ad
      WHERE ad_group_ad.ad.status IN ('ENABLED', 'PAUSED')
    `;
    
    const rows = AdsApp.search(query);
    
    while (rows.hasNext()) {
      const row = rows.next();
      const finalUrls = row['ad_group_ad.ad.final_urls'];
      
      if (finalUrls && finalUrls.length > 0) {
        // Check for common landing page issues
        const url = finalUrls[0];
        
        if (url.includes('localhost') || url.includes('127.0.0.1')) {
          errors.push({
            accountName: mapping.accountName,
            accountId: mapping.accountId,
            errorType: "INVALID_LANDING_PAGE",
            severity: "HIGH",
            message: `Ad '${row['ad_group_ad.ad.name']}' has invalid landing page: ${url}`,
            recommendation: "Update landing page URL to a valid domain"
          });
        }
      }
    }
    
  } catch (error) {
    Logger.log(`Error checking landing page issues: ${error.message}`);
  }
  
  return errors;
}

// Targeting Issues - Check for Presence or Interest targeting
function checkTargetingIssues(account, mapping) {
  const errors = [];
  
  try {
    Logger.log("Checking targeting issues...");
    
    const query = `
      SELECT 
          campaign.id,
          campaign.name,
          campaign.status,
          campaign.geo_target_type_setting.positive_geo_target_type,
          campaign.geo_target_type_setting.negative_geo_target_type
      FROM campaign
      WHERE campaign.status = 'ENABLED'
    `;
    
    const rows = AdsApp.search(query);
    
    while (rows.hasNext()) {
      const row = rows.next();
      const positiveGeoType = row['campaign.geo_target_type_setting.positive_geo_target_type'];
      
      // Check for presence or interest targeting (very broad)
      if (positiveGeoType === 'LOCATION_OF_PRESENCE' || positiveGeoType === 'LOCATION_OF_INTEREST') {
        errors.push({
          accountName: mapping.accountName,
          accountId: mapping.accountId,
          errorType: "BROAD_GEO_TARGETING",
          severity: "LOW",
          message: `Campaign '${row['campaign.name']}' has very broad geographic targeting (${positiveGeoType})`,
          recommendation: "Consider more specific geographic targeting for better performance"
        });
      }
    }
    
  } catch (error) {
    Logger.log(`Error checking targeting issues: ${error.message}`);
  }
  
  return errors;
}

// Enhanced Conversion Tracking Issues
function checkConversionTrackingIssues(account, mapping) {
  const errors = [];
  
  try {
    Logger.log("Checking conversion tracking issues...");
    
    // Method 1: Try to access customer conversion tracking settings
    try {
      const customerQuery = `
        SELECT 
            customer.id,
            customer.conversion_tracking_settings
        FROM customer
      `;
      
      const customerRows = AdsApp.search(customerQuery);
      
      if (customerRows.hasNext()) {
        const customerRow = customerRows.next();
        const conversionSettings = customerRow['customer.conversion_tracking_settings'];
        
        // Check if conversion tracking is enabled
        if (!conversionSettings || !conversionSettings.has_conversion_tracking) {
          errors.push({
            accountName: mapping.accountName,
            accountId: mapping.accountId,
            errorType: "NO_CONVERSION_TRACKING",
            severity: "MEDIUM",
            message: "No conversion tracking set up for this account",
            recommendation: "Set up conversion tracking to measure campaign performance"
          });
        }
      }
    } catch (customerError) {
      Logger.log(`Customer conversion tracking query failed: ${customerError.message}`);
      
      // Method 2: Check for conversion actions
      try {
        const conversionActionsQuery = `
          SELECT 
              conversion_action.id,
              conversion_action.name,
              conversion_action.status,
              conversion_action.type
          FROM conversion_action
          WHERE conversion_action.status = 'ENABLED'
        `;
        
        const conversionRows = AdsApp.search(conversionActionsQuery);
        let conversionActionsFound = 0;
        let inactiveConversionActions = 0;
        
        while (conversionRows.hasNext()) {
          const row = conversionRows.next();
          conversionActionsFound++;
          
          // Check for inactive conversion actions
          if (row['conversion_action.status'] !== 'ENABLED') {
            inactiveConversionActions++;
          }
        }
        
        if (conversionActionsFound === 0) {
          errors.push({
            accountName: mapping.accountName,
            accountId: mapping.accountId,
            errorType: "NO_CONVERSION_ACTIONS",
            severity: "MEDIUM",
            message: "No conversion actions found in this account",
            recommendation: "Create conversion actions to track important user actions"
          });
        }
        
        if (inactiveConversionActions > 0) {
          errors.push({
            accountName: mapping.accountName,
            accountId: mapping.accountId,
            errorType: "INACTIVE_CONVERSION_ACTIONS",
            severity: "MEDIUM",
            message: `${inactiveConversionActions} conversion action(s) are inactive`,
            recommendation: "Review and reactivate conversion actions or create new ones"
          });
        }
        
      } catch (conversionActionError) {
        Logger.log(`Conversion actions query failed: ${conversionActionError.message}`);
        
        // Method 3: Check campaign-level conversion data
        try {
          const campaignConversionQuery = `
            SELECT 
                campaign.id,
                campaign.name,
                metrics.conversions,
                metrics.conversions_value
            FROM campaign
            WHERE campaign.status = 'ENABLED'
            AND segments.date DURING LAST_30_DAYS
          `;
          
          const campaignRows = AdsApp.search(campaignConversionQuery);
          let campaignsWithConversions = 0;
          let totalConversions = 0;
          
          while (campaignRows.hasNext()) {
            const row = campaignRows.next();
            const conversions = parseFloat(row['metrics.conversions']) || 0;
            totalConversions += conversions;
            
            if (conversions > 0) {
              campaignsWithConversions++;
            }
          }
          
          // If no conversions in 30 days, flag as potential issue
          if (totalConversions === 0) {
            errors.push({
              accountName: mapping.accountName,
              accountId: mapping.accountId,
              errorType: "NO_RECENT_CONVERSIONS",
              severity: "MEDIUM",
              message: "No conversions recorded in the last 30 days",
              recommendation: "Check conversion tracking setup and campaign performance"
            });
          }
          
        } catch (campaignConversionError) {
          Logger.log(`Campaign conversion query failed: ${campaignConversionError.message}`);
          
          // Method 4: Check for common conversion tracking issues
          errors.push({
            accountName: mapping.accountName,
            accountId: mapping.accountId,
            errorType: "CONVERSION_TRACKING_ACCESS_ISSUE",
            severity: "HIGH",
            message: "Unable to access conversion tracking data - possible permission or setup issue",
            recommendation: "Check account permissions, conversion tracking setup, and ensure proper access rights"
          });
        }
      }
    }
    
  } catch (error) {
    Logger.log(`Error checking conversion tracking issues: ${error.message}`);
    
    // If all methods fail, add a general access error
    errors.push({
      accountName: mapping.accountName,
      accountId: mapping.accountId,
      errorType: "CONVERSION_TRACKING_UNKNOWN_ERROR",
      severity: "HIGH",
      message: `Error accessing conversion tracking data: ${error.message}`,
      recommendation: "Check account permissions and contact support if issues persist"
    });
  }
  
  return errors;
}

// Feed Issues (for shopping campaigns)
function checkFeedIssues(account, mapping) {
  const errors = [];
  
  try {
    Logger.log("Checking feed issues...");
    
    const query = `
      SELECT 
          campaign.id,
          campaign.name,
          campaign.shopping_setting.merchant_id
      FROM campaign
      WHERE campaign.advertising_channel_type = 'SHOPPING'
      AND campaign.status = 'ENABLED'
    `;
    
    const rows = AdsApp.search(query);
    
    while (rows.hasNext()) {
      const row = rows.next();
      const merchantId = row['campaign.shopping_setting.merchant_id'];
      
      if (!merchantId) {
        errors.push({
          accountName: mapping.accountName,
          accountId: mapping.accountId,
          errorType: "MISSING_MERCHANT_CENTER",
          severity: "HIGH",
          message: `Shopping campaign '${row['campaign.name']}' not linked to Merchant Center`,
          recommendation: "Link Google Merchant Center account and upload product feed"
        });
      }
    }
    
  } catch (error) {
    Logger.log(`Error checking feed issues: ${error.message}`);
  }
  
  return errors;
}
